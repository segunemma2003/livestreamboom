name: Deploy to AWS Elastic Beanstalk

on:
  push:
    branches: [main, production, develop, staging]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create logs directory
        run: mkdir -p logs

      - name: Run migrations
        env:
          SECRET_KEY: "test-secret-key-for-ci"
          DEBUG: "True"
          LIVESTREAM_DB_NAME: "test_db"
          LIVESTREAM_DB_USER: "postgres"
          LIVESTREAM_DB_PASSWORD: "postgres"
          LIVESTREAM_DB_HOST: "localhost"
          LIVESTREAM_DB_PORT: "5432"
          REDIS_URL: "redis://localhost:6379/0"
          DJANGO_SETTINGS_MODULE: "livestream_project.settings_production"
        run: |
          python manage.py migrate

      - name: Run tests
        env:
          SECRET_KEY: "test-secret-key-for-ci"
          DEBUG: "True"
          LIVESTREAM_DB_NAME: "test_db"
          LIVESTREAM_DB_USER: "postgres"
          LIVESTREAM_DB_PASSWORD: "postgres"
          LIVESTREAM_DB_HOST: "localhost"
          LIVESTREAM_DB_PORT: "5432"
          REDIS_URL: "redis://localhost:6379/0"
          DJANGO_SETTINGS_MODULE: "livestream_project.settings_production"
        run: |
          python manage.py test

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push staging image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: livestream-service
          IMAGE_TAG: staging-${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:staging-latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:staging-latest

      - name: Update Dockerrun.aws.json for staging
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: livestream-service
          IMAGE_TAG: staging-${{ github.sha }}
        run: |
          sed -i "s|your-ecr-repo/livestream-service:latest|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" Dockerrun.aws.json

      - name: Install EB CLI
        run: |
          python -m pip install --upgrade pip
          pip install awsebcli

      - name: Deploy to staging environment
        run: |
          eb init ${{ secrets.EB_APPLICATION_NAME }} --region ${{ env.AWS_REGION }} --platform "Docker running on 64bit Amazon Linux 2"
          eb use ${{ secrets.EB_STAGING_ENVIRONMENT_NAME }}
          eb deploy --timeout 20

  deploy-production:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push production image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: livestream-service
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Update Dockerrun.aws.json for production
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: livestream-service
          IMAGE_TAG: ${{ github.sha }}
        run: |
          sed -i "s|your-ecr-repo/livestream-service:latest|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" Dockerrun.aws.json

      - name: Install EB CLI
        run: |
          python -m pip install --upgrade pip
          pip install awsebcli

      - name: Deploy to production environment
        run: |
          eb init ${{ secrets.EB_APPLICATION_NAME }} --region ${{ env.AWS_REGION }} --platform "Docker running on 64bit Amazon Linux 2"
          eb use ${{ secrets.EB_ENVIRONMENT_NAME }}
          eb deploy --timeout 20

      - name: Health check
        run: |
          sleep 30
          EB_URL=$(eb status | grep "CNAME" | awk '{print $2}')
          if [ ! -z "$EB_URL" ]; then
            HEALTH_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "http://$EB_URL/health/" || echo "000")
            if [ "$HEALTH_RESPONSE" = "200" ]; then
              echo "‚úÖ Health check passed! Application is running at: http://$EB_URL"
            else
              echo "‚ùå Health check failed! HTTP status: $HEALTH_RESPONSE"
              exit 1
            fi
          else
            echo "‚ö†Ô∏è Could not retrieve application URL for health check"
          fi

  notify:
    needs: [deploy-production, deploy-staging]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-production.result }}" = "success" ]; then
            echo "üöÄ Production deployment successful!"
          elif [ "${{ needs.deploy-staging.result }}" = "success" ]; then
            echo "üß™ Staging deployment successful!"
          else
            echo "‚ùå Deployment failed!"
          fi
