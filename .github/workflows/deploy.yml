name: "Deploy to AWS Elastic Beanstalk"

on:
  push:
    branches:
      - main
      - develop
      - staging

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 934155604952.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: livestream-service

jobs:
  deploy-production:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: "Login to Amazon ECR"
        uses: aws-actions/amazon-ecr-login@v2

      - name: "Extract ECR registry and repository from URI"
        id: ecr-info
        run: |
          ECR_URI="${{ secrets.ECR_REPOSITORY_URI }}"
          ECR_REGISTRY=$(echo $ECR_URI | cut -d'/' -f1)
          ECR_REPOSITORY=$(echo $ECR_URI | cut -d'/' -f2)

          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_OUTPUT
          echo "ECR_REPOSITORY=$ECR_REPOSITORY" >> $GITHUB_OUTPUT

          echo "ECR Registry: $ECR_REGISTRY"
          echo "ECR Repository: $ECR_REPOSITORY"

      - name: "Validate Dockerfile and dependencies"
        run: |
          echo "Validating Dockerfile..."
          docker --version
          
          echo "Checking Python requirements..."
          if [ -f requirements.txt ]; then
            echo "Requirements file found"
            head -10 requirements.txt
          else
            echo "ERROR: requirements.txt not found"
            exit 1
          fi
          
          echo "Checking Django settings..."
          if [ -f livestream_project/settings_production.py ]; then
            echo "Production settings found"
          else
            echo "ERROR: Production settings not found"
            exit 1
          fi

      - name: "Build Docker image"
        env:
          ECR_REGISTRY: ${{ steps.ecr-info.outputs.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ steps.ecr-info.outputs.ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          echo "Building image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          
          docker build \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --cache-from $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:prod-${GITHUB_SHA::7} \
            .
          
          echo "Image built successfully"
          docker images | grep $ECR_REPOSITORY

      - name: "Test Docker image locally"
        env:
          ECR_REGISTRY: ${{ steps.ecr-info.outputs.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ steps.ecr-info.outputs.ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          echo "Testing Docker image locally..."
          
          CONTAINER_ID=$(docker run -d \
            -p 8000:8000 \
            -e DEBUG=False \
            -e DJANGO_SETTINGS_MODULE=livestream_project.settings_production \
            -e SECRET_KEY=test-key-for-build-$(date +%s) \
            -e ALLOWED_HOSTS="localhost,127.0.0.1,*" \
            -e PYTHONPATH=/app \
            --health-cmd="curl -f http://localhost:8000/health/ || exit 1" \
            --health-interval=10s \
            --health-timeout=5s \
            --health-retries=3 \
            --health-start-period=30s \
            $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG)
          
          echo "Container ID: $CONTAINER_ID"
          
          check_container_status() {
            local status=$(docker inspect --format='{{.State.Status}}' $CONTAINER_ID 2>/dev/null)
            echo $status
          }
          
          check_container_health() {
            local health=$(docker inspect --format='{{.State.Health.Status}}' $CONTAINER_ID 2>/dev/null)
            echo $health
          }
          
          echo "Waiting for container to start..."
          MAX_WAIT=120
          WAIT_TIME=0
          
          while [ $WAIT_TIME -lt $MAX_WAIT ]; do
            STATUS=$(check_container_status)
            HEALTH=$(check_container_health)
            
            echo "Time: ${WAIT_TIME}s - Status: $STATUS, Health: $HEALTH"
            
            if [ "$STATUS" = "running" ]; then
              if [ "$HEALTH" = "healthy" ] || [ "$HEALTH" = "" ]; then
                echo "Container is running and healthy!"
                break
              fi
            elif [ "$STATUS" = "exited" ]; then
              echo "Container exited unexpectedly"
              echo "Container logs:"
              docker logs $CONTAINER_ID
              exit 1
            fi
            
            sleep 5
            WAIT_TIME=$((WAIT_TIME + 5))
          done
          
          FINAL_STATUS=$(check_container_status)
          if [ "$FINAL_STATUS" != "running" ]; then
            echo "Container failed to start properly"
            echo "Final status: $FINAL_STATUS"
            echo "Container logs:"
            docker logs $CONTAINER_ID
            exit 1
          fi
          
          echo "Testing health endpoint..."
          HEALTH_SUCCESS=false
          
          for i in {1..12}; do
            echo "Health check attempt $i/12..."
            
            if curl -f -s --max-time 10 http://localhost:8000/health/; then
              echo "Health check passed!"
              HEALTH_SUCCESS=true
              break
            fi
            
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health/ 2>/dev/null || echo "000")
            echo "HTTP status code: $HTTP_CODE"
            
            if [ $i -eq 6 ]; then
              echo "Health check taking longer than expected, showing container logs:"
              docker logs --tail=20 $CONTAINER_ID
            fi
            
            sleep 5
          done
          
          if [ "$HEALTH_SUCCESS" = false ]; then
            echo "Health check failed after all attempts"
            echo "Final container logs:"
            docker logs $CONTAINER_ID
            
            echo "Container inspect:"
            docker inspect $CONTAINER_ID
            
            echo "Attempting to connect to container directly:"
            docker exec $CONTAINER_ID curl -v http://localhost:8000/health/ || true
            
            exit 1
          fi
          
          echo "Testing additional endpoints..."
          
          ADMIN_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/admin/ 2>/dev/null || echo "000")
          echo "Admin endpoint status: $ADMIN_CODE"
          
          API_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/api/ 2>/dev/null || echo "000")
          echo "API endpoint status: $API_CODE"
          
          echo "Docker container test completed successfully!"
          
          echo "Stopping and removing container..."
          docker stop $CONTAINER_ID
          docker rm $CONTAINER_ID

      - name: "Push Docker image to ECR"
        env:
          ECR_REGISTRY: ${{ steps.ecr-info.outputs.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ steps.ecr-info.outputs.ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          echo "Pushing images to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:prod-${GITHUB_SHA::7}
          
          echo "Verifying image in ECR..."
          aws ecr describe-images \
            --repository-name $ECR_REPOSITORY \
            --image-ids imageTag=$IMAGE_TAG \
            --query 'imageDetails[0].imageSizeInBytes' \
            --output text

      - name: "Update Dockerrun.aws.json"
        env:
          ECR_REGISTRY: ${{ steps.ecr-info.outputs.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ steps.ecr-info.outputs.ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          echo "Updating Dockerrun.aws.json..."
          sed -i "s|\"image\": \".*\"|\"image\": \"$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG\"|g" Dockerrun.aws.json
          
          echo "Validating Dockerrun.aws.json..."
          python -m json.tool Dockerrun.aws.json > /dev/null
          
          echo "Updated Dockerrun.aws.json:"
          cat Dockerrun.aws.json

      - name: "Create deployment package"
        run: |
          echo "Creating deployment package..."
          
          mkdir -p deploy-temp
          
          cp Dockerrun.aws.json deploy-temp/
          cp -r .ebextensions deploy-temp/ 2>/dev/null || echo "No .ebextensions directory found"
          
          cd deploy-temp
          zip -r ../deploy.zip .
          cd ..
          
          echo "Deployment package created:"
          ls -la deploy.zip
          unzip -l deploy.zip

      - name: "Ensure S3 bucket exists and upload deployment package"
        env:
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
        run: |
          echo "Checking S3 bucket: $S3_BUCKET"
          
          if ! aws s3api head-bucket --bucket "$S3_BUCKET" 2>/dev/null; then
            echo "Creating S3 bucket: $S3_BUCKET"
            if [ "$AWS_REGION" = "us-east-1" ]; then
              aws s3api create-bucket --bucket "$S3_BUCKET" --region "$AWS_REGION"
            else
              aws s3api create-bucket \
                --bucket "$S3_BUCKET" \
                --region "$AWS_REGION" \
                --create-bucket-configuration LocationConstraint="$AWS_REGION"
            fi
            
            aws s3api wait bucket-exists --bucket "$S3_BUCKET"
          fi
          
          S3_KEY="deployments/prod-${GITHUB_SHA::7}-$(date +%s).zip"
          aws s3 cp deploy.zip "s3://$S3_BUCKET/$S3_KEY"
          
          echo "S3_KEY=$S3_KEY" >> $GITHUB_ENV
          echo "Deployment package uploaded to: s3://$S3_BUCKET/$S3_KEY"

      - name: "Deploy to Elastic Beanstalk with enhanced error handling"
        env:
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
          APP_NAME: ${{ secrets.EB_APPLICATION_NAME }}
          ENV_NAME: ${{ secrets.EB_ENVIRONMENT_NAME }}
        run: |
          VERSION_LABEL="prod-${GITHUB_SHA::7}-$(date +%s)"
          echo "Creating application version: $VERSION_LABEL"
          echo "App: $APP_NAME, Environment: $ENV_NAME"

          CURRENT_STATUS=$(aws elasticbeanstalk describe-environments \
            --environment-names "$ENV_NAME" \
            --query 'Environments[0].Status' \
            --output text)
          echo "Current environment status: $CURRENT_STATUS"

          if [[ "$CURRENT_STATUS" != "Ready" && "$CURRENT_STATUS" != "Warning" ]]; then
            echo "Environment is not ready for deployment (Status: $CURRENT_STATUS)"
            echo "Waiting for environment to become ready..."
            aws elasticbeanstalk wait environment-updated --environment-names "$ENV_NAME"
          fi

          aws elasticbeanstalk create-application-version \
            --application-name "$APP_NAME" \
            --version-label "$VERSION_LABEL" \
            --description "Production deployment from commit ${GITHUB_SHA::7}" \
            --source-bundle S3Bucket="$S3_BUCKET",S3Key="$S3_KEY"

          MAX_ATTEMPTS=3
          ATTEMPT=1
          DEPLOYMENT_SUCCESS=false

          while [ $ATTEMPT -le $MAX_ATTEMPTS ] && [ "$DEPLOYMENT_SUCCESS" = false ]; do
            echo "=== Deployment attempt $ATTEMPT/$MAX_ATTEMPTS ==="
            
            if aws elasticbeanstalk update-environment \
              --environment-name "$ENV_NAME" \
              --version-label "$VERSION_LABEL"; then
              
              echo "Deployment command submitted successfully"
              
              echo "Waiting for deployment to complete (timeout: 30 minutes)..."
              
              if timeout 1800 aws elasticbeanstalk wait environment-updated \
                --environment-names "$ENV_NAME" \
                --cli-read-timeout 0 \
                --cli-connect-timeout 60; then
                
                FINAL_STATUS=$(aws elasticbeanstalk describe-environments \
                  --environment-names "$ENV_NAME" \
                  --query 'Environments[0].Status' \
                  --output text)
                
                FINAL_HEALTH=$(aws elasticbeanstalk describe-environments \
                  --environment-names "$ENV_NAME" \
                  --query 'Environments[0].Health' \
                  --output text)
                
                echo "Final Status: $FINAL_STATUS, Health: $FINAL_HEALTH"
                
                if [[ "$FINAL_STATUS" == "Ready" ]] && [[ "$FINAL_HEALTH" =~ ^(Green|Yellow)$ ]]; then
                  echo "Deployment completed successfully!"
                  DEPLOYMENT_SUCCESS=true
                  break
                else
                  echo "Deployment completed but environment is not healthy"
                fi
              else
                echo "Deployment timed out or failed"
              fi
            else
              echo "Failed to submit deployment command"
            fi
            
            if [ "$DEPLOYMENT_SUCCESS" = false ]; then
              if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
                echo "Deployment attempt $ATTEMPT failed, waiting before retry..."
                sleep 60
              fi
              ATTEMPT=$((ATTEMPT + 1))
            fi
          done

          if [ "$DEPLOYMENT_SUCCESS" = false ]; then
            echo "All deployment attempts failed"
            
            echo "Recent environment events:"
            aws elasticbeanstalk describe-events \
              --environment-name "$ENV_NAME" \
              --max-items 10 \
              --query 'Events[*].[EventDate,Severity,Message]' \
              --output table
            
            exit 1
          fi

      - name: "Post-deployment health verification"
        env:
          ENV_NAME: ${{ secrets.EB_ENVIRONMENT_NAME }}
        run: |
          echo "=== Post-deployment health verification ==="
          
          ENV_URL=$(aws elasticbeanstalk describe-environments \
            --environment-names "$ENV_NAME" \
            --query 'Environments[0].CNAME' \
            --output text)
          
          if [ "$ENV_URL" != "None" ] && [ ! -z "$ENV_URL" ]; then
            echo "Environment URL: http://$ENV_URL"
            
            echo "Testing health endpoint..."
            HEALTH_SUCCESS=false
            
            for i in {1..10}; do
              echo "Health check attempt $i/10..."
              
              if curl -f -s --max-time 30 "http://$ENV_URL/health/" > /dev/null; then
                echo "Health check passed!"
                HEALTH_SUCCESS=true
                break
              fi
              
              echo "Health check failed, waiting 15 seconds..."
              sleep 15
            done
            
            if [ "$HEALTH_SUCCESS" = false ]; then
              echo "Health check failed after 10 attempts"
              echo "This may indicate application startup issues"
              
              echo "Attempting to get health response for debugging:"
              curl -v "http://$ENV_URL/health/" || true
              
              exit 1
            fi
            
            echo "Testing main API endpoint..."
            if curl -f -s --max-time 30 "http://$ENV_URL/api/v1/livestream/test-connection/" > /dev/null; then
              echo "API endpoint test passed!"
            else
              echo "API endpoint test failed (may be expected if requires authentication)"
            fi
            
          else
            echo "Could not retrieve environment URL"
          fi

      - name: "Cleanup old application versions"
        env:
          APP_NAME: ${{ secrets.EB_APPLICATION_NAME }}
        run: |
          echo "Cleaning up old application versions..."
          
          aws elasticbeanstalk describe-application-versions \
            --application-name "$APP_NAME" \
            --query 'ApplicationVersions[10:].VersionLabel' \
            --output text | tr '\t' '\n' | while read version; do
            if [ ! -z "$version" ]; then
              echo "Deleting old version: $version"
              aws elasticbeanstalk delete-application-version \
                --application-name "$APP_NAME" \
                --version-label "$version" \
                --delete-source-bundle
            fi
          done

      - name: "Notify deployment status"
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "Production deployment completed successfully!"
            echo "Commit: ${GITHUB_SHA::7}"
            echo "Branch: ${{ github.ref_name }}"
          else
            echo "Production deployment failed!"
            echo "Check the logs above for details"
          fi

  deploy-staging:
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: "Login to Amazon ECR"
        uses: aws-actions/amazon-ecr-login@v2

      - name: "Extract ECR registry and repository from URI"
        id: ecr-info
        run: |
          ECR_URI="${{ secrets.ECR_REPOSITORY_URI }}"
          ECR_REGISTRY=$(echo $ECR_URI | cut -d'/' -f1)
          ECR_REPOSITORY=$(echo $ECR_URI | cut -d'/' -f2)

          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_OUTPUT
          echo "ECR_REPOSITORY=$ECR_REPOSITORY" >> $GITHUB_OUTPUT

      - name: "Build and push staging Docker image"
        env:
          ECR_REGISTRY: ${{ steps.ecr-info.outputs.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ steps.ecr-info.outputs.ECR_REPOSITORY }}
          IMAGE_TAG: staging
        run: |
          echo "Building staging image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          
          docker build \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:staging-${GITHUB_SHA::7} \
            .
          
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:staging-${GITHUB_SHA::7}

      - name: "Update Dockerrun.aws.json for staging"
        env:
          ECR_REGISTRY: ${{ steps.ecr-info.outputs.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ steps.ecr-info.outputs.ECR_REPOSITORY }}
          IMAGE_TAG: staging
        run: |
          sed -i "s|\"image\": \".*\"|\"image\": \"$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG\"|g" Dockerrun.aws.json
          python -m json.tool Dockerrun.aws.json > /dev/null

      - name: "Create and upload staging deployment package"
        env:
          S3_BUCKET: ${{ secrets.S3_BUCKET_STAGING }}
        run: |
          mkdir -p deploy-temp
          cp Dockerrun.aws.json deploy-temp/
          cp -r .ebextensions deploy-temp/ 2>/dev/null || echo "No .ebextensions directory"
          cd deploy-temp && zip -r ../deploy.zip . && cd ..
          
          if ! aws s3api head-bucket --bucket "$S3_BUCKET" 2>/dev/null; then
            if [ "$AWS_REGION" = "us-east-1" ]; then
              aws s3api create-bucket --bucket "$S3_BUCKET" --region "$AWS_REGION"
            else
              aw
