option_settings:
  aws:elasticbeanstalk:container:python:
    WSGIPath: "livestream_project.wsgi:application"
  aws:elasticbeanstalk:application:environment:
    DJANGO_SETTINGS_MODULE: "livestream_project.settings_production"
    PYTHONPATH: "/var/app/current"
    
container_commands:
  01_install_ffmpeg:
    command: |
      amazon-linux-extras install epel -y
      yum install -y ffmpeg
  02_create_superuser:
    command: "source /var/app/venv/*/bin/activate && python manage.py shell -c \"from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.filter(username='admin').exists() or User.objects.create_superuser('admin', 'admin@example.com', 'changeme')\""
    leader_only: true
  03_setup_celery:
    command: |
      cat > /etc/systemd/system/celery.service << 'EOF'
      [Unit]
      Description=Celery Service
      After=network.target
      
      [Service]
      Type=forking
      User=webapp
      Group=webapp
      EnvironmentFile=/opt/elasticbeanstalk/deployment/env
      WorkingDirectory=/var/app/current
      ExecStart=/var/app/venv/*/bin/celery -A livestream_project worker --detach --loglevel=info --logfile=/var/log/celery.log
      ExecStop=/bin/kill -s TERM $MAINPID
      Restart=always
      
      [Install]
      WantedBy=multi-user.target
      EOF
      systemctl daemon-reload
      systemctl enable celery
      systemctl start celery
  04_setup_celery_beat:
    command: |
      cat > /etc/systemd/system/celery-beat.service << 'EOF'
      [Unit]
      Description=Celery Beat Service
      After=network.target
      
      [Service]
      Type=forking
      User=webapp
      Group=webapp
      EnvironmentFile=/opt/elasticbeanstalk/deployment/env
      WorkingDirectory=/var/app/current
      ExecStart=/var/app/venv/*/bin/celery -A livestream_project beat --detach --loglevel=info --logfile=/var/log/celery-beat.log --scheduler django_celery_beat.schedulers:DatabaseScheduler
      ExecStop=/bin/kill -s TERM $MAINPID
      Restart=always
      
      [Install]
      WantedBy=multi-user.target
      EOF
      systemctl daemon-reload
      systemctl enable celery-beat
      systemctl start celery-beat